rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth.token.is_admin;
    }

    function isInAccount(accountID) {
      return request.auth.uid in get(/databases/$(database)/documents/accounts/$(accountID)).data["user_ids"];
    }

    function isAccountAdmin(accountID) {
      return request.auth.uid in get(/databases/$(database)/documents/accounts/$(accountID)/account_privates/account_private).data["admin_user_ids"];
    }

    function validateString(text, min, max, nullable) {
      return (nullable == true && text == null)
      || (text is string
        && (min == null || min is int && min <= text.size())
        && (max == null || max is int && text.size() <= max)
      );
    }

    function validateURL(text) {
      return text is string && text.matches('^https?://[\\w/:%#\\$&\\?\\(\\)~\\.=\\+\\-]+$');
    }

    match /accounts/{accountID} {
      allow read;
      allow create: if request.auth.uid in request.resource.data['user_ids'] || isAdmin();
      allow update: if isAccountAdmin(accountID) || isAdmin();
    }

    match /users/{userID} {
      allow read:   if request.auth.uid == userID || request.auth.uid in resource.data.userIDs;
      allow create: if request.auth.uid == userID || request.auth.uid in request.resource.data.userIDs;
      allow update: if request.auth.uid == userID || (request.auth.uid in request.resource.data.adminUserIDs && request.auth.uid in resource.data.adminUserIDs);
    }
  }
}
